/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var neo4j = require('neo4j');
var log = require('oae-logger').logger('neo4j');

var Validator = require('oae-util/lib/validator').Validator;

var config = null;
var db = null;

/**
 * Initialize the Neo4J connection.
 * @param  {Object}     neo4jConfig     The Neo4J configuration object
 */
var init = module.exports.init = function(neo4jConfig) {
    config = neo4jConfig;
    db = new neo4j.GraphDatabase(neo4jConfig.host);
};

/**
 * Get the Neo4J database instance
 * @return  {GraphDatabase}         The Neo4J graph database instance
 */
var getNeo4JDB = module.exports.getNeo4JDB = function() {
    if (!db) {
        return {'code': 400, 'msg': 'Neo4J has not been initialized yet'};
    }
    return db;
};

/**
 * Store the nodes
 * TODO
 */
var createNode = module.exports.createNode = function(uid, properties, callback) {
    var validator = new Validator();
    validator.check(uid, {'code': 400, 'msg': 'An unique entity id must be provided'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Check if the node already exists
    var type = uid.split(':')[0];
    db.getIndexedNode(type, 'uid', uid, function(err, node) {
        if (node) {
            return callback(null, node);
        }

        properties = properties || {};
        properties.uid = uid;
        properties.type = type;
        node = db.createNode(properties);
        
        // Save the node
        node.save(function(err) {
            if (err) {
                return callback({'code': 500, 'msg': err});
            }

            // Index the node
            node.index(type, 'uid', uid, function(err) {
                if (err) {
                    return callback({'code': 500, 'msg': err});
                }

                callback(null, node);
            });
        });
    });
};

/**
 * Create a relationship
 * TODO
 * @param {Object} type1
 * @param {Object} uid1
 * @param {Object} type2
 * @param {Object} uid2
 * @param {Object} relationName
 * @param {Object} callbck
 */
var upsertRelationship = module.exports.upsertRelationship = function(uidFrom, uidTo, relationName, callback) {
    var validator = new Validator();
    validator.check(uidFrom, {'code': 400, 'msg': 'An entity id must be provided'}).notEmpty();
    validator.check(uidTo, {'code': 400, 'msg': 'An entity id must be provided'}).notEmpty();
    validator.check(relationName, {'code': 400, 'msg': 'An entity id must be provided'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }
    
    var indexName = uidFrom + ':' + uidTo;
    var fromType = uidFrom.split(':')[0];
    var toType = uidTo.split(':')[0];

    var createRel = function() {
        // Get Node 1
        createNode(uidFrom, {}, function(err, nodeFrom) {
            createNode(uidTo, {}, function(err, nodeTo) {
                // Create the relationship
                nodeFrom.createRelationshipTo(nodeTo, relationName, {}, function(err, rel) {
                    if (err) {
                        return callback({'code': 500, 'msg': err});
                    }
                    // Index the rel
                    rel.index('rel', 'rid', indexName, function(err) {
                        if (err) {
                            return callback({'code': 500, 'msg': err});
                        }
                        callback(null, true);
                    });
                });
            });
        });
    };
    
    // Check if the relationship exists
    db.getIndexedRelationship('rel', 'rid', indexName, function(err, relationship) {
        // If it exists and is the same, don't do anything
        if (relationship) {
            console.log('RELATIONSHIP ALREADY EXISTS');
            console.log(relationship.type);
            console.log(relationName);
            if (relationship.type === relationName) {
                return callback(null, true);
            } else {
                 // If it exists and is different, delete it first
                 console.log('DELETING RELATIONSHIP');
                 relationship.del(function(err) {
                     console.log('RELATIONSHIP DELETED');
                     console.log(err);
                    if (err) {
                        return callback({'code': 500, 'msg': err});
                    }
                    // Create it
                    createRel();
                 }, true);
            }
            
        // If it doesn't exist, create it
        } else {
            console.log('Going to step 1');
            createRel();
        }
    });   
};

/**
 * TODO
 */
var deleteRelationship = module.exports.deleteRelationship = function(uidFrom, uidTo, callback) {
    var validator = new Validator();
    validator.check(uidFrom, {'code': 400, 'msg': 'An entity id must be provided'}).notEmpty();
    validator.check(uidTo, {'code': 400, 'msg': 'An entity id must be provided'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }
    
    var indexName = uidFrom + ':' + uidTo;
    db.getIndexedRelationship('rel', 'rid', indexName, function(err, relationship) {
        // If it exists and is the same, don't do anything
        if (relationship) {
            // Delete it
            relationship.del(function(err) {
                if (err) {
                    return callback({'code': 500, 'msg': err});
                }
                // Create it
                callback(null, true);
            });
        // If it doesn't exist, create it
        } else {
            callback(null, true);
        }
    });
};
