/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var neo4j = require('neo4j');
var log = require('oae-logger').logger('neo4j');

var Validator = require('oae-util/lib/validator').Validator;

var config = null;
var db = null;

/**
 * Initialize the Neo4J connection.
 * @param  {Object}     neo4jConfig     The Neo4J configuration object
 */
var init = module.exports.init = function(neo4jConfig) {
    config = neo4jConfig;
    db = new neo4j.GraphDatabase(neo4jConfig.url);
};

/**
 * Get the Neo4J database instance
 * @return  {GraphDatabase}         The Neo4J graph database instance
 */
var getNeo4JDB = module.exports.getNeo4JDB = function() {
    if (!db) {
        return {'code': 400, 'msg': 'Neo4J has not been initialized yet'};
    }
    return db;
};

/**
 * Store the nodes
 * TODO
 */
var createNode = function(type, uid, properties, callback) {
    var validator = new Validator();
    validator.check(type, {'code': 400, 'msg': 'An entity type must be provided'}).notEmpty();
    validator.check(type, {'code': 400, 'msg': 'An unique entity id must be provided'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Check if the node already exists
    db.getIndexedNode(type, 'uid', uid, function(err, node) {
        if (err) {
            return callback({'code': 500, 'msg': err});
        } else if (node) {
            return callback({'code': 400, 'msg': 'The node with uid ' + uid + ' already exists'});
        }

        properties = properties || {};
        properties.uid = uid;
        properties.type = type;
        node = db.createNode(properties);
        
        // Save the node
        node.save(function (err, node) {
            if (err) {
                return callback({'code': 500, 'msg': err});
            }

            // Index the node
            node.index(type, 'uid', uid, callback);
        });
    });
};
